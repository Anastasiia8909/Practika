import os

from api import PetFriends
from settings import valid_email, valid_password


pf = PetFriends()

def test_get_apikey_for_valid_user(email=valid_email, password=valid_password):
    status, result = pf.get_api_key(email, password)
    assert status == 200
    assert 'key' in result


def test_get_all_pets_with_valid_key(filter=''):
    _, auth_key = pf.get_api_key(valid_email, valid_password)
    status, result = pf.get_list_of_pets(auth_key, filter)
    assert status == 200
    assert len(result['pets']) > 0


def test_add_new_pet_with_valid_data(name='Рекс', animal_type='двортерьер',
                                    age='4', pet_photo='images/cat1.jpg'):
    pet_photo = os.path.join(os.path.dirname(__file__), pet_photo)
    _, auth_key = pf.get_api_key(valid_email, valid_password)

    status, result = pf.add_new_pet(auth_key, name, animal_type, age, pet_photo)
    assert status == 200
    assert result['name'] == name


def test_successful_delete_self_pet():
    _, auth_key = pf.get_api_key(valid_email, valid_password)
    _, my_pets = pf.get_list_of_pets(auth_key, "my_pets")

    if len(my_pets['pets']) == 0:
        pf.add_new_pet(auth_key, "Суперкот", "кот", "3", "images/cat1.jpg")
        _, my_pets = pf.get_list_of_pets(auth_key, "my_pets")

    pet_id = my_pets['pets'][0]['id']
    status, _ = pf.delete_pet(auth_key, pet_id)
    _, my_pets = pf.get_list_of_pets(auth_key, "my_pets")
    assert status == 200
    assert pet_id not in my_pets.values()


def test_successful_update_self_pet_info(self, name='Мурзик', animal_type='Котэ', age=5):
    _, auth_key = self.pf.get_api_key(valid_email, valid_password)
    _, my_pets = self.pf.get_list_of_pets(auth_key, "my_pets")

    if len(my_pets['pets']) > 0:
        status, result = self.pf.update_pet_info(auth_key, my_pets['pets'][0]['id'], name, animal_type, age)
        assert status == 200
        assert result['name'] == name
    else:
        raise Exception("There is no my pets")


# 10 тестов (домашнее задание)
#1 Негативный тест на ввод неправильного email
def test_get_api_key_unsuccessful_for_valid_user(email = 'неправильнаяПочта@gmail.com', password = valid_password):
    status, result = pf.get_api_key(email, password)
    assert == 401

#2 Негативный тест на ввод неправильного пароля
def test_get_api_key_unsuccessful2_for_valid_user(email = valid_email, password = 'неправильныйПароль'):
    status, result = pf.get_api_key(email, password)
    assert == 401

# 3 Негативный тест на ввод пустого поля в имени
def test_post_unsuccessful_new_name_pet(name='', animal_type='двортерьер',
                                    age='4', pet_photo='images/cat1.jpg'):
    pet_photo = os.path.join(os.path.dirname(__file__), pet_photo)
    _, auth_key = pf.get_api_key(valid_email, valid_password)

    status, result = pf.add_new_pet(auth_key, name, animal_type, age, pet_photo)
    assert status == 400

# 4 Негативный тест на ввод пустого поля "вид животного"
def test_post_unsuccessful_new_animal_type_pet(name='Рекс', animal_type='',
                                    age='4', pet_photo='images/cat1.jpg'):
    pet_photo = os.path.join(os.path.dirname(__file__), pet_photo)
    _, auth_key = pf.get_api_key(valid_email, valid_password)

    status, result = pf.add_new_pet(auth_key, name, animal_type, age, pet_photo)
    assert status == 400

# 5 Негативный тест на ввод пустого поля "возраст"
def test_post_unsuccessful_new_age_pet(name='Рекс', animal_type='двортерьер',
                                    age='', pet_photo='images/cat1.jpg'):
    pet_photo = os.path.join(os.path.dirname(__file__), pet_photo)
    _, auth_key = pf.get_api_key(valid_email, valid_password)

    status, result = pf.add_new_pet(auth_key, name, animal_type, age, pet_photo)
    assert status == 400

# 6 Негативный тест на ввод пустого поля "фотография"
def test_post_unsuccessful_new_photo_pet(name='Рекс', animal_type='двортерьер',
                                    age='4', pet_photo=''):
    pet_photo = os.path.join(os.path.dirname(__file__), pet_photo)
    _, auth_key = pf.get_api_key(valid_email, valid_password)

    status, result = pf.add_new_pet(auth_key, name, animal_type, age, pet_photo)
    assert status == 400

# 7 Негативный тест на некорректный возраст питомца
def test_post_unsuccessful_len_age_pet(name='Рекс', animal_type='двортерьер',
                                    age='457', pet_photo='images/cat1.jpg'):
    pet_photo = os.path.join(os.path.dirname(__file__), pet_photo)
    _, auth_key = pf.get_api_key(valid_email, valid_password)


    if len(str(age)) < 0:
        raise Exception('Питомец еще не родился?')
    status, result = pf.add_new_pet(auth_key, name, animal_type, age, pet_photo)
    assert status == 400
    else:
       len(str(age)) >= 100:
    raise Exception('Столько не живут')

